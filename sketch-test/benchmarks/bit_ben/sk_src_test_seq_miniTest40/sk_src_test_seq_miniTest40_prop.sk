int N = 4;

bit[N] transpose(bit[N] input){
	bit[N] output=0;
	for(int i=0; i<N; ++i){
		output[i] = input[i];
	}
	return output;
}


bit[N] pbe_tiledTranspose(bit[N] input) {
	bit[N] output=0;
	int i=0;
	repeat(??){
		int j=0;
		if(??){
			output[i+j] = input[i+j];
			j=j+1;
			output[i+j] = input[i+j];
			j=j+1;
		}
		i = i+2;
	}
	return output;
}

bit is_permutation(int[N] y) {
    bit[N] res = 0;
    for (int i=0; i<N; i++) {
        if (y[i]<0 || y[i]>=N || res[y[i]] == 1) {
            return 0;
        } else {
            res[y[i]] = 1;
        }
    }
    return 1;
}

bit[N] permute(bit[N]x, int[N] ind){
    bit[N] res = 0;
    for(int i=0; i<N; i++){
        res[i]= x[ind[i]];
    }
    return res;
}


harness void test_permutation_invar(bit[N] x, int[N] y) {
    if (!is_permutation(y)) return;
    bit[N] xp = permute(x,y);
    assert permute(pbe_tiledTranspose(x), y) == pbe_tiledTranspose(xp);
}
