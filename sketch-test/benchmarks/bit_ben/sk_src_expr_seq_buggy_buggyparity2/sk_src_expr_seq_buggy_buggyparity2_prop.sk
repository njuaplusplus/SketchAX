int W=8;

generator bit [W] mult(bit[W] in1, bit[W] in2){ /* automatically rewritten */
    bit [W] result = 0;
    for(int i=0; i<W; ++i){
        if(in2[i]==1){
            result = result + in1;
        }
        in1 = in1 << 1;
    }
    return result;
}

bit parity(bit[W] in)
{
    bit ret=0;
    for(int i=0;i<W;i++)
        ret=ret^in[i];
    return ret;
}

bit pbe_fasterparity(bit[W] in) 
{
    bit[W] x=in;
    bit[W] y;
    bit[W] z=??;
    x=x^(x>>1);
    x=x^(x>>2);
    x=x & z;
    y=mult(x,z);
    return y[??];
}

bit is_permutation(int[W] y) {
    bit[W] res = 0;
    for (int i=0; i<W; i++) {
        if (y[i]<0 || y[i]>=W || res[y[i]] == 1) {
            return 0;
        } else {
            res[y[i]] = 1;
        }
    }
    return 1;
}

bit[W] permute(bit[W]x, int[W] ind){
    bit[W] res = 0;
    for(int i=0; i<W; i++){
        res[i]= x[ind[i]];
    }
    return res;
}


harness void test_permutation_invar(bit[W] x, int[W] y) {
    if (!is_permutation(y)) return;
    bit[W] xp = permute(x,y);
    assert pbe_fasterparity(x) == pbe_fasterparity(xp);
}

