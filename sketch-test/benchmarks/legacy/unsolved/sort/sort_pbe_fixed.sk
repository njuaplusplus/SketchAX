//@Description Sketch of a merge sort implementation.
/**
 * This example provides a nice case study of the use of generators to produce 
 * complicated expressions. The generator exprBoolG is a high-order generator that
 * takes as a parameter a generator that produces operands, and generates an expression involving 
 * conjunctions and disjunctions of comparisons of those operands.  
 * 
 * 
 */

include "generators.skh";
pragma options "--bnd-inline-amnt 5 --bnd-inbits 3"; 

int[N] MergeSort1([int N], int[N] input) {
   int[N] output=0;
   if(N>1){ 
      int No2a = N/2; int No2b = N-No2a;      
      int[No2a] firstHalf = input[0::No2a];
      int[No2b] secondHalf = input[No2a::No2b];
      firstHalf = MergeSort1( firstHalf);
      secondHalf = MergeSort1( secondHalf);
      int x=0;
      int y=0; 
      generator int chose(ref int choice){
         choice = ??;
         if(choice==0){ return firstHalf[x]; }
         if(choice==1){ return secondHalf[y]; }
         if(choice==2){ return N; }
         if(choice==3){ return No2a; }
         if(choice==4){ return No2b; }
         if(choice==5){ return x; }
         if(choice==6){ return y; }
         assert choice <=6;
      }
      for(int i=0; i<N; ++i){         
         if(exprBoolG(chose, {})){
            output[i] = firstHalf[x]; x = x+1;
         }else{
            output[i] = secondHalf[y]; y = y+1;
         }
      }
   }else{
      output = input;   
   }
   return output;
}

harness void constraints(int N, int[N] ind) {
   if (N == 1) {
   assert_one_permutation(1, {29}, {29}, ind);
   }
   if (N == 2) {
   assert_one_permutation(2, {13,22}, {13,22}, ind);
   }
   if (N == 4) {
   assert_one_permutation(4, {13,22,19,9}, {9,13,19,22}, ind);
   assert_one_permutation(4, {11,0,22,28}, {0,11,22,28}, ind);
   }
   if (N == 5) {
   assert_one_permutation(5, {11,14,28,5,8}, {5,8,11,14,28}, ind);
   }
   if (N == 6) {
   assert_one_permutation(6, {21,10,24,0,11,26}, {0,10,11,21,24,26}, ind);
   assert_one_permutation(6, {14,22,17,27,24,26}, {14,17,22,24,26,27}, ind);
   }
   if (N == 7) {
   assert_one_permutation(7, {17,10,12,24,1,23,22}, {1,10,12,17,22,23,24}, ind);
   assert_one_permutation(7, {3,24,15,25,5,26,17}, {3,5,15,17,24,25,26}, ind);
   }
   if (N == 8) {
   assert_one_permutation(8, {25,28,13,8,20,24,11,1}, {1,8,11,13,20,24,25,28}, ind);
   }
}

void assert_one_permutation(int N, int[N] x, int[N] o, int[N] ind) {
    if (!is_permutation(N, ind)) return;
    int[N] xp = permute(N, x, ind);
    assert MergeSort1(xp) == o;
}

bit is_permutation(int N, int[N] ind) {
    bit[N] res = 0;
    for (int i=0; i<N; ++i) {
        if (ind[i]<0 || ind[i]>=N || res[ind[i]] == 1) {
            return 0;
        } else {
            res[ind[i]] = 1;
        }
    }
    return 1;
}

int[N] permute(int N, int[N]x, int[N] ind){
    int[N] res = 0;
    for(int i=0; i<N; ++i){
        res[i]= x[ind[i]];
    }
    return res;
}


