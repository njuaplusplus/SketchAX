int N = 10;

generator int index(int i, int j){ /* automatically rewritten */
    return i*N + j;
}

int[N*N] transpose(int[N*N] input){
    int[N*N] output=0;
    for(int i=0; i<N; ++i){
        for(int j=0; j<N; ++j){
            output[index(i,j)] = input[index(j,i)];
        }
    }
    return output;
}

int[N*N] pbe_tiledTranspose0 (int[N*N] input) {
    int[N*N] output=0;
    
    int N2in = 4; 
    int N1in = 4;     
        
    int N1 = ??; //??;
    int N1inc = N1in; //??;
    int N2 = ??; //??;
    int N2inc = N2in; //??;
    int exp1 = ??;     // N-??;
    int exp2 = ??;    // N-??;
    
    int i=0;
    loop(N1){
        int j=0;
        loop(N2){
            int ip = i;
            loop(N1in){
                int jp = j;
                loop(N2in){
                    output[index(ip,jp)] = input[index(jp,ip)];
                    jp = jp + 1;
                }
                ip = ip + 1;
            }
            j = j+N2inc;
        }

        loop(exp2){
            int ip = i;
            loop(N1in){
                output[index(ip,j)] = input[index(j,ip)];
                ip = ip + 1;
            }
            j = j+1;
        }
        i = i+N1inc;
    }
    loop(exp1){
        int j=0;
        loop(N){
            output[index(i,j)] = input[index(j,i)];
            j = j+1;
        }
        i = i+1;
    }
    
    return output;
}


