// output by specification
void fast0 (bit[16] x_0, bit[16] m_1, ref bit[16] _out)  implements fast1/*compress.sk:39*/
{
  _out = ((bit[16])0);
  bit[16] x = x_0;
  x = x_0 & m_1;
  bit[16] mk = (!(m_1)) << 1;
  bit[16] mp_s1 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast0(mk, mp_s1);
  bit[16] mv = mp_s1 & m_1;
  bit[16] t = m_1 & mv;
  bit[16] m_s3 = (m_1 ^ t) | (t >> 1);
  bit[16] t_0 = x & mv;
  bit[16] x_s5 = (x ^ t_0) | (t_0 >> 1);
  mk = mk & (!(mp_s1));
  bit[16] mp_s1_0 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast0(mk, mp_s1_0);
  mv = mp_s1_0 & m_s3;
  bit[16] t_1 = m_s3 & mv;
  bit[16] m_s3_0 = (m_s3 ^ t_1) | (t_1 >> 2);
  bit[16] t_2 = x_s5 & mv;
  bit[16] x_s5_0 = (x_s5 ^ t_2) | (t_2 >> 2);
  mk = mk & (!(mp_s1_0));
  bit[16] mp_s1_1 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast0(mk, mp_s1_1);
  mv = mp_s1_1 & m_s3_0;
  bit[16] t_3 = m_s3_0 & mv;
  bit[16] t_4 = x_s5_0 & mv;
  bit[16] x_s5_1 = (x_s5_0 ^ t_4) | (t_4 >> 4);
  mk = mk & (!(mp_s1_1));
  bit[16] mp_s1_2 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast0(mk, mp_s1_2);
  mv = mp_s1_2 & ((m_s3_0 ^ t_3) | (t_3 >> 4));
  bit[16] t_5 = x_s5_1 & mv;
  _out = (x_s5_1 ^ t_5) | (t_5 >> 8);
  return;
}
void xor_reduceFast0 (bit[16] in, ref bit[16] _out)  implements xor_reduceFast1/*compress.sk:26*/
{
  _out = ((bit[16])0);
  _out = in;
  _out = ((in << 3) & ({0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0})) ^ ((in << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  _out = ((_out << 3) & ({0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0})) ^ ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  _out = ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((_out << 4) & ({0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0}));
  _out = ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((_out << 8) & ({0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0}));
  _out = ((_out << 2) & ({0,0,1,0,1,1,0,1,1,1,1,1,1,1,0,0})) ^ ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  _out = ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((_out << 2) & ({0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1}));
  _out = ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((_out << 1) & ({0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  return;
}

// output by example
void fast1 (bit[16] x_0, bit[16] m_1, ref bit[16] _out)/*compress_pbe.sk:78*/
{
  _out = ((bit[16])0);
  bit[16] x = x_0;
  x = x_0 & m_1;
  bit[16] mk = (!(m_1)) << 0;
  bit[16] mp_s13 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast1(mk, mp_s13);
  bit[16] mv = mp_s13 & m_1;
  bit[16] t = m_1 & mv;
  bit[16] m_s15 = (m_1 ^ t) | (t >> 1);
  bit[16] t_0 = x & mv;
  bit[16] x_s17 = (x ^ t_0) | (t_0 >> 1);
  mk = mk & (!(mp_s13));
  bit[16] mp_s13_0 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast1(mk, mp_s13_0);
  mv = mp_s13_0 & m_s15;
  bit[16] t_1 = m_s15 & mv;
  bit[16] m_s15_0 = (m_s15 ^ t_1) | (t_1 >> 2);
  bit[16] t_2 = x_s17 & mv;
  bit[16] x_s17_0 = (x_s17 ^ t_2) | (t_2 >> 2);
  mk = mk & (!(mp_s13_0));
  bit[16] mp_s13_1 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast1(mk, mp_s13_1);
  mv = mp_s13_1 & m_s15_0;
  bit[16] t_3 = m_s15_0 & mv;
  bit[16] t_4 = x_s17_0 & mv;
  bit[16] x_s17_1 = (x_s17_0 ^ t_4) | (t_4 >> 4);
  mk = mk & (!(mp_s13_1));
  bit[16] mp_s13_2 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast1(mk, mp_s13_2);
  mv = mp_s13_2 & ((m_s15_0 ^ t_3) | (t_3 >> 4));
  bit[16] t_5 = x_s17_1 & mv;
  _out = (x_s17_1 ^ t_5) | (t_5 >> 8);
  return;
}
void xor_reduceFast1 (bit[16] in, ref bit[16] _out)
{
  _out = ((bit[16])0);
  _out = in;
  _out = ((in << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((in << 8) & ({0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1}));
  _out = ((_out << 4) & ({0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  _out = ((_out << 2) & ({0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  _out = ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((_out << 1) & ({0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  return;
}
