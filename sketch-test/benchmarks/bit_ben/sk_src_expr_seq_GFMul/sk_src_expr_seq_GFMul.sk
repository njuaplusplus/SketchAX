//This benchmark comes from a little piece of AES. 
//It is a multiplication of (in * 02) mod P in the field
//galois field of polynomials in {0,1},  mod P.

bit[8] GFMul02sk(bit[8] in) implements GFMul02 {
 	bit [8] m = (in>>??) & ??;
 	loop(2) {
		m=(m<<??) | m;
	}
	return (in<<??) ^ m;
}

bit[8] GFMul02 (bit[8] in) {
  bit[9] tin= 0;
    for(int i=0; i<8; ++i)
      tin[i+1] = in[i];
    //Note that multiplication times p(x) is just shift by one.
    //But now comes the fun part, we have to reduce.
    // by x^8+x^4+x^3+x+1
    //But since the new poly is only of degree
    // 8, we simply subtract it.
    bit[9] modpoly = {1,1,0,1,1,0,0,0,1};
    for(int k=0; k<8; ++k){
      if( tin[8] == 1 ){
      tin[k] = ( tin[k] ^ modpoly[k] );
      }
    }
    bit [8] out;
    for(int k=0; k<8; ++k)
      out[k] = tin[k];
    return out;
}


