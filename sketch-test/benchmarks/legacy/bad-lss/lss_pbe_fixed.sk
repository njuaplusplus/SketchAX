//@Description Sketch that takes in an array of signed inputs and returns the maximum value of the sum of any contiguous subarray, in linear time.

pragma options "--bnd-inline-amnt 5 --bnd-inbits 3 --bnd-cbits 2";

int W = 4;

int lssSketch1(int[W] in) {
    for(int i=0; i<W; ++i){ in[i] = in[i] - 3; }
    int sum = 0;
    int maxsum = 0;
    int psum = 0;
    for(int i = 0;i<W; i++) {
        psum = sum;
        sum = sum + in[i];
        if({|  (sum | psum | ??) (+|-)  (sum | psum | ??)  <= ?? |}) sum = {|  (sum | psum | ??) (+|-)  (sum | psum | ??) |};
        if(sum > maxsum) maxsum = sum;
    }
    return maxsum;
}


// harness void constraints() {
// assert lssSketch1({1,2,3,4}) == 1;
// assert lssSketch1({4,5,6,7}) == 10;
// assert lssSketch1({3,0,4,4}) == 2;
// assert lssSketch1({-1,1,3,5}) == 2;
// assert lssSketch1({5,7,9,11}) == 20;
// assert lssSketch1({3,-3,5,5}) == 4;
// assert lssSketch1({-3,0,3,6}) == 3;
// assert lssSketch1({6,9,12,15}) == 30;
// assert lssSketch1({3,-6,6,6}) == 6;
// assert lssSketch1({-5,-1,3,7}) == 4;
// assert lssSketch1({7,11,15,19}) == 40;
// assert lssSketch1({3,-9,7,7}) == 8;
// assert lssSketch1({-7,-2,3,8}) == 5;
// assert lssSketch1({8,13,18,23}) == 50;
// assert lssSketch1({3,-12,8,8}) == 10;
// assert lssSketch1({-9,-3,3,9}) == 6;
// assert lssSketch1({9,15,21,27}) == 60;
// assert lssSketch1({3,-15,9,9}) == 12;
// assert lssSketch1({-11,-4,3,10}) == 7;
// assert lssSketch1({10,17,24,31}) == 70;
// assert lssSketch1({3,-18,10,10}) == 14;
// assert lssSketch1({-13,-5,3,11}) == 8;
// assert lssSketch1({11,19,27,35}) == 80;
// assert lssSketch1({3,-21,11,11}) == 16;
// assert lssSketch1({-15,-6,3,12}) == 9;
// assert lssSketch1({12,21,30,39}) == 90;
// assert lssSketch1({3,-24,12,12}) == 18;
// assert lssSketch1({-17,-7,3,13}) == 10;
// assert lssSketch1({13,23,33,43}) == 100;
// assert lssSketch1({3,-27,13,13}) == 20;
// assert lssSketch1({-19,-8,3,14}) == 11;
// assert lssSketch1({14,25,36,47}) == 110;
// assert lssSketch1({3,-30,14,14}) == 22;
// assert lssSketch1({-21,-9,3,15}) == 12;
// assert lssSketch1({15,27,39,51}) == 120;
// assert lssSketch1({3,-33,15,15}) == 24;
// assert lssSketch1({-23,-10,3,16}) == 13;
// assert lssSketch1({16,29,42,55}) == 130;
// assert lssSketch1({3,-36,16,16}) == 26;
// assert lssSketch1({-25,-11,3,17}) == 14;
// assert lssSketch1({17,31,45,59}) == 140;
// assert lssSketch1({3,-39,17,17}) == 28;
// assert lssSketch1({-27,-12,3,18}) == 15;
// assert lssSketch1({18,33,48,63}) == 150;
// assert lssSketch1({3,-42,18,18}) == 30;
// assert lssSketch1({-29,-13,3,19}) == 16;
// assert lssSketch1({19,35,51,67}) == 160;
// assert lssSketch1({3,-45,19,19}) == 32;
// assert lssSketch1({-31,-14,3,20}) == 17;
// assert lssSketch1({20,37,54,71}) == 170;
// assert lssSketch1({3,-48,20,20}) == 34;
// assert lssSketch1({-33,-15,3,21}) == 18;
// assert lssSketch1({21,39,57,75}) == 180;
// assert lssSketch1({3,-51,21,21}) == 36;
// assert lssSketch1({-35,-16,3,22}) == 19;
// assert lssSketch1({22,41,60,79}) == 190;
// assert lssSketch1({3,-54,22,22}) == 38;
// 
// //   for (int k=1; k<20; ++k) {
// //       assert_k_uniform_noise({1,2,3,4}, k, 1);
// //       assert_k_uniform_noise({4,5,6,7}, k, 10);
// //       assert_k_uniform_noise({3,0,4,4}, k, 2);
// //   }
// }
// 
// // void assert_k_uniform_noise(int[W] x, int k, int maxsum) {
// //     maxsum = maxsum * k;
// //     for (int i=0; i<W; ++i) {
// //         x[i] = k * x[i] - 3 * (k-1);
// //     }
// //     assert lssSketch1(x) == maxsum;
// // }
// 
