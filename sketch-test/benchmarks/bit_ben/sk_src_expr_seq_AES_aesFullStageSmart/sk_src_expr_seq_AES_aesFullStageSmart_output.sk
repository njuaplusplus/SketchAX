/* BEGIN PACKAGE ANONYMOUS*/
/*sk_src_..eSmart.sk:256*/

void MixColumns (bit[32] input, ref bit[32] _out)/*sk_src_..eSmart.sk:256*/
{
  _out = ((bit[32])0);
  bit[8] in4 = {0,0,0,0,0,0,0,0};
  bit[8] in1 = {0,0,0,0,0,0,0,0};
  bit[8] in2 = {0,0,0,0,0,0,0,0};
  bit[8] in3 = {0,0,0,0,0,0,0,0};
  for(int i = 0; i < 8; i = i + 1)/*Canonical*/
  {
    in1[i] = input[i];
    in2[i] = input[i + 8];
    in3[i] = input[i + 16];
    in4[i] = input[i + 24];
  }
  bit[8] in1_s46 = ((bit[8])0);
  bit[9] in = {0,0,0,0,0,0,0,0,0};
  for(int i_0 = 0; i_0 < 8; i_0 = i_0 + 1)/*Canonical*/
  {
    in[i_0 + 1] = in1[i_0];
  }
  bit[9] modpoly = {1,1,0,1,1,0,0,0,1};
  for(int k = 0; k < 8; k = k + 1)/*Canonical*/
  {
    if((in[8]) == 1)/*sk_src_..eSmart.sk:169*/
    {
      in[k] = (in[k]) ^ (modpoly[k]);
    }
  }
  for(int i_1 = 0; i_1 < 8; i_1 = i_1 + 1)/*Canonical*/
  {
    in1_s46[i_1] = in[i_1];
  }
  bit[8] in2_s48 = ((bit[8])0);
  bit[9] in_0 = {0,0,0,0,0,0,0,0,0};
  for(int i_2 = 0; i_2 < 8; i_2 = i_2 + 1)/*Canonical*/
  {
    in_0[i_2 + 1] = in2[i_2];
  }
  for(int i_3 = 0; i_3 < 8; i_3 = i_3 + 1)/*Canonical*/
  {
    in_0[i_3] = (in_0[i_3]) ^ (in2[i_3]);
  }
  bit[9] modpoly_0 = {1,1,0,1,1,0,0,0,1};
  if((in_0[8]) == 1)/*sk_src_..eSmart.sk:142*/
  {
    for(int k_0 = 0; k_0 < 8; k_0 = k_0 + 1)/*Canonical*/
    {
      in_0[k_0] = (in_0[k_0]) ^ (modpoly_0[k_0]);
    }
  }
  for(int i_4 = 0; i_4 < 8; i_4 = i_4 + 1)/*Canonical*/
  {
    in2_s48[i_4] = in_0[i_4];
  }
  bit[8] o1_s14 = ((in1_s46 ^ in2_s48) ^ in3) ^ in4;
  bit[8] in4_0 = {0,0,0,0,0,0,0,0};
  bit[8] in1_0 = {0,0,0,0,0,0,0,0};
  bit[8] in2_0 = {0,0,0,0,0,0,0,0};
  bit[8] in3_0 = {0,0,0,0,0,0,0,0};
  for(int i_5 = 0; i_5 < 8; i_5 = i_5 + 1)/*Canonical*/
  {
    in1_0[i_5] = input[i_5];
    in2_0[i_5] = input[i_5 + 8];
    in3_0[i_5] = input[i_5 + 16];
    in4_0[i_5] = input[i_5 + 24];
  }
  bit[8] in2_s40 = ((bit[8])0);
  bit[9] in_1 = {0,0,0,0,0,0,0,0,0};
  for(int i_6 = 0; i_6 < 8; i_6 = i_6 + 1)/*Canonical*/
  {
    in_1[i_6 + 1] = in2_0[i_6];
  }
  bit[9] modpoly_1 = {1,1,0,1,1,0,0,0,1};
  for(int k_1 = 0; k_1 < 8; k_1 = k_1 + 1)/*Canonical*/
  {
    if((in_1[8]) == 1)/*sk_src_..eSmart.sk:169*/
    {
      in_1[k_1] = (in_1[k_1]) ^ (modpoly_1[k_1]);
    }
  }
  for(int i_7 = 0; i_7 < 8; i_7 = i_7 + 1)/*Canonical*/
  {
    in2_s40[i_7] = in_1[i_7];
  }
  bit[8] in3_s42 = ((bit[8])0);
  bit[9] in_2 = {0,0,0,0,0,0,0,0,0};
  for(int i_8 = 0; i_8 < 8; i_8 = i_8 + 1)/*Canonical*/
  {
    in_2[i_8 + 1] = in3_0[i_8];
  }
  for(int i_9 = 0; i_9 < 8; i_9 = i_9 + 1)/*Canonical*/
  {
    in_2[i_9] = (in_2[i_9]) ^ (in3_0[i_9]);
  }
  bit[9] modpoly_2 = {1,1,0,1,1,0,0,0,1};
  if((in_2[8]) == 1)/*sk_src_..eSmart.sk:142*/
  {
    for(int k_2 = 0; k_2 < 8; k_2 = k_2 + 1)/*Canonical*/
    {
      in_2[k_2] = (in_2[k_2]) ^ (modpoly_2[k_2]);
    }
  }
  for(int i_10 = 0; i_10 < 8; i_10 = i_10 + 1)/*Canonical*/
  {
    in3_s42[i_10] = in_2[i_10];
  }
  bit[8] o2_s16 = ((in1_0 ^ in2_s40) ^ in3_s42) ^ in4_0;
  bit[8] in4_1 = {0,0,0,0,0,0,0,0};
  bit[8] in1_1 = {0,0,0,0,0,0,0,0};
  bit[8] in2_1 = {0,0,0,0,0,0,0,0};
  bit[8] in3_1 = {0,0,0,0,0,0,0,0};
  for(int i_11 = 0; i_11 < 8; i_11 = i_11 + 1)/*Canonical*/
  {
    in1_1[i_11] = input[i_11];
    in2_1[i_11] = input[i_11 + 8];
    in3_1[i_11] = input[i_11 + 16];
    in4_1[i_11] = input[i_11 + 24];
  }
  bit[8] in3_s34 = ((bit[8])0);
  bit[9] in_3 = {0,0,0,0,0,0,0,0,0};
  for(int i_12 = 0; i_12 < 8; i_12 = i_12 + 1)/*Canonical*/
  {
    in_3[i_12 + 1] = in3_1[i_12];
  }
  bit[9] modpoly_3 = {1,1,0,1,1,0,0,0,1};
  for(int k_3 = 0; k_3 < 8; k_3 = k_3 + 1)/*Canonical*/
  {
    if((in_3[8]) == 1)/*sk_src_..eSmart.sk:169*/
    {
      in_3[k_3] = (in_3[k_3]) ^ (modpoly_3[k_3]);
    }
  }
  for(int i_13 = 0; i_13 < 8; i_13 = i_13 + 1)/*Canonical*/
  {
    in3_s34[i_13] = in_3[i_13];
  }
  bit[8] in4_s36 = ((bit[8])0);
  bit[9] in_4 = {0,0,0,0,0,0,0,0,0};
  for(int i_14 = 0; i_14 < 8; i_14 = i_14 + 1)/*Canonical*/
  {
    in_4[i_14 + 1] = in4_1[i_14];
  }
  for(int i_15 = 0; i_15 < 8; i_15 = i_15 + 1)/*Canonical*/
  {
    in_4[i_15] = (in_4[i_15]) ^ (in4_1[i_15]);
  }
  bit[9] modpoly_4 = {1,1,0,1,1,0,0,0,1};
  if((in_4[8]) == 1)/*sk_src_..eSmart.sk:142*/
  {
    for(int k_4 = 0; k_4 < 8; k_4 = k_4 + 1)/*Canonical*/
    {
      in_4[k_4] = (in_4[k_4]) ^ (modpoly_4[k_4]);
    }
  }
  for(int i_16 = 0; i_16 < 8; i_16 = i_16 + 1)/*Canonical*/
  {
    in4_s36[i_16] = in_4[i_16];
  }
  bit[8] o3_s18 = ((in1_1 ^ in2_1) ^ in3_s34) ^ in4_s36;
  bit[8] in4_2 = {0,0,0,0,0,0,0,0};
  bit[8] in1_2 = {0,0,0,0,0,0,0,0};
  bit[8] in2_2 = {0,0,0,0,0,0,0,0};
  bit[8] in3_2 = {0,0,0,0,0,0,0,0};
  for(int i_17 = 0; i_17 < 8; i_17 = i_17 + 1)/*Canonical*/
  {
    in1_2[i_17] = input[i_17];
    in2_2[i_17] = input[i_17 + 8];
    in3_2[i_17] = input[i_17 + 16];
    in4_2[i_17] = input[i_17 + 24];
  }
  bit[8] in1_s22 = ((bit[8])0);
  bit[9] in_5 = {0,0,0,0,0,0,0,0,0};
  for(int i_18 = 0; i_18 < 8; i_18 = i_18 + 1)/*Canonical*/
  {
    in_5[i_18 + 1] = in1_2[i_18];
  }
  for(int i_19 = 0; i_19 < 8; i_19 = i_19 + 1)/*Canonical*/
  {
    in_5[i_19] = (in_5[i_19]) ^ (in1_2[i_19]);
  }
  bit[9] modpoly_5 = {1,1,0,1,1,0,0,0,1};
  if((in_5[8]) == 1)/*sk_src_..eSmart.sk:142*/
  {
    for(int k_5 = 0; k_5 < 8; k_5 = k_5 + 1)/*Canonical*/
    {
      in_5[k_5] = (in_5[k_5]) ^ (modpoly_5[k_5]);
    }
  }
  for(int i_20 = 0; i_20 < 8; i_20 = i_20 + 1)/*Canonical*/
  {
    in1_s22[i_20] = in_5[i_20];
  }
  bit[8] in4_s28 = ((bit[8])0);
  bit[9] in_6 = {0,0,0,0,0,0,0,0,0};
  for(int i_21 = 0; i_21 < 8; i_21 = i_21 + 1)/*Canonical*/
  {
    in_6[i_21 + 1] = in4_2[i_21];
  }
  bit[9] modpoly_6 = {1,1,0,1,1,0,0,0,1};
  for(int k_6 = 0; k_6 < 8; k_6 = k_6 + 1)/*Canonical*/
  {
    if((in_6[8]) == 1)/*sk_src_..eSmart.sk:169*/
    {
      in_6[k_6] = (in_6[k_6]) ^ (modpoly_6[k_6]);
    }
  }
  for(int i_22 = 0; i_22 < 8; i_22 = i_22 + 1)/*Canonical*/
  {
    in4_s28[i_22] = in_6[i_22];
  }
  bit[8] o4_s20 = ((in1_s22 ^ in2_2) ^ in3_2) ^ in4_s28;
  for(int i_23 = 0; i_23 < 8; i_23 = i_23 + 1)/*Canonical*/
  {
    _out[i_23] = o1_s14[i_23];
    _out[i_23 + 8] = o2_s16[i_23];
    _out[i_23 + 16] = o3_s18[i_23];
    _out[i_23 + 24] = o4_s20[i_23];
  }
  return;
}
/*sk_src_..eSmart.sk:110*/

void MixColumnsSK (bit[32] input, ref bit[32] _out)  implements pbe_MixColumnsSK
{
  _out = ((bit[32])0);
  bit[32] t1 = ((input << 1) & ({0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1})) ^ (input & ({0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));
  bit[32] m1 = (input >> 7) & ({1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0});
  bit[32] m2 = (m1 << 3) | m1;
  bit[32] t1_0 = ((input << 1) & ({0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1})) ^ (input & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  bit[32] m1_0 = (input >> 7) & ({1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0});
  bit[32] m2_0 = (m1_0 << 3) | m1_0;
  bit[32] o2_s4 = t1_0 ^ ((m2_0 << 1) | m2_0);
  bit[32] t1_1 = ((input << 1) & ({0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0})) ^ (input & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  bit[32] m1_1 = (input >> 7) & ({0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
  bit[32] m2_1 = (m1_1 << 3) | m1_1;
  bit[32] o3_s6 = t1_1 ^ ((m2_1 << 1) | m2_1);
  bit[32] tmp = o2_s4 << 24;
  bit[32] tmp2 = o2_s4 >> 8;
  bit[32] _out_s8 = ((bit[32])0);
  int i = 0;
  for(i = 0; i < 32; i = i + 1)
  {
    _out_s8[i] = (i < 24 ? tmp2[i] : tmp[i]);
  }
  bit[32] tmp_0 = o3_s6 << 16;
  bit[32] tmp2_0 = o3_s6 >> 16;
  bit[32] _out_s10 = ((bit[32])0);
  int i_0 = 0;
  for(i_0 = 0; i_0 < 32; i_0 = i_0 + 1)
  {
    _out_s10[i_0] = (i_0 < 16 ? tmp2_0[i_0] : tmp_0[i_0]);
  }
  bit[32] tmp_1 = o3_s6 << 8;
  bit[32] tmp2_1 = o3_s6 >> 24;
  bit[32] _out_s12 = ((bit[32])0);
  int i_1 = 0;
  for(i_1 = 0; i_1 < 32; i_1 = i_1 + 1)
  {
    _out_s12[i_1] = (i_1 < 8 ? tmp2_1[i_1] : tmp_1[i_1]);
  }
  _out = (((t1 ^ ((m2 << 1) | m2)) ^ _out_s8) ^ _out_s10) ^ _out_s12;
  return;
}
/* END PACKAGE ANONYMOUS*/
