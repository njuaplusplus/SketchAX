int maxSketch1(int N, int[N] a) {
    assume N > 0;
    int max = {| ?? | N | a[??] |};
    for (int i=??; i<N; i++) {
        if ({| (i | N | a[i] | max) (<|<=) (i | N | a[i] | max) |}) {
            max = {| i | N | a[i] |};
        }
    }
    return max;
}

// harness void constraints(int N, int[N] y){
//     if (N == 1) {
//         assert_one_permutation(1, {-1}, -1, y);
//     }
//     if (N == 3) {
//         assert_one_permutation(3, { 0,10, 2}, 10, y);
//         assert_one_permutation(3, {-1,10,20}, 20, y);
//         assert_one_permutation(3, {-1,-2,-3}, -1, y);
//         // assert_one_permutation(3, {1,1,1}, 1, y);
// 
//         // assert_all_rotations(3, { 0,10, 2}, 10);
//         // assert_all_rotations(3, {-1,10,20}, 20);
//     }
//     if (N == 4) {
//         // assert_one_permutation(4, {0,1,2,10}, 10, y);
//         // assert_all_rotations(4, {0,1,2,10}, 10);
//     }
//     if (N == 6) {
//         // assert_one_permutation(6, {2,0,1,7,9,11}, 11, y);
//         // assert_all_rotations(6, {2,0,1,7,9,11}, 11);
//     }
// }
// 
// void assert_one_permutation(int N, int[N] x, int m, int[N] y) {
//     if (!is_permutation(N, y)) return;
//     int[N] xp = permute(N, x,y);
//     assert maxSketch1(N, xp) == m;
// }
// 
// bit is_permutation(int N, int[N] y) {
//     bit[N] res = 0;
//     for (int i=0; i<N; i++) {
//         if (y[i]<0 || y[i]>=N || res[y[i]] == 1) {
//             return 0;
//         } else {
//             res[y[i]] = 1;
//         }
//     }
//     return 1;
// }
// 
// int[N] permute(int N, int[N]x, int[N] ind){
//     int[N] res = 0;
//     for(int i=0; i<N; i++){
//         res[i]= x[ind[i]];
//     }
//     return res;
// }
// 
// // int[N] k_rotation(int N, int [N] x, int k) {
// //     if (k == 0 || N == 0) {
// //         return x;
// //     }
// //     k = k % N;
// //     if (k < 0) {
// //         // rotate k elements leftwards
// //         // it is equal to rotate N-k elements rightwards.
// //         k = N+k;
// //     }
// //     int l = k;
// //     int[l] tmp = x[N-l::l];
// //     x[l::N-l] = x[0::N-l];
// //     x[0::l] = tmp;
// //     return x;
// // }
// // 
// // void assert_k_rotation(int N, int [N] x, int m, int k) {
// //     int[N] xr = k_rotation(N, x, k);
// //     assert maxSketch1(N, xr) == m;
// // }
// // 
// // void assert_k_uniform_noise(int N, int[N] x, int m, int k) {
// //     m += k;
// //     for (int i=1; i<N; i++) {
// //         x[i] += k;
// //     }
// //     assert maxSketch1(N, x) == m;
// // }
// // 
// // void assert_all_rotations(int N, int[N] x, int m) {
// //     assert maxSketch1(N, x) == m;
// //     for (int i=1; i<N; i++) {
// //         int t = x[N-1];
// //         x[1::N-1] = x[0::N-1];
// //         x[0] = t;
// //         assert maxSketch1(N, x) == m;
// //     }
// // }
// 
// 
// // harness void test_permutation_invar(int N, int[N] x, int[N] y) {
// //     if (!is_permutation(N, y)) return;
// //     int[N] xp = permute(N, x,y);
// //     assert maxSketch1(N, x) == maxSketch1(N, xp);
// // }
// 
// // harness void originConstraint() {
// // //    int[3][6] tests= {
// // //        {0,10,2  },
// // //        {0,2,10  },
// // //        {10,0,2  },
// // //        {10,2,0  },
// // //        {2,0,10  },
// // //        {2,10,0  }
// // //    };
// // //
// // //    for (int i=0; i<6; i++) {
// // //        assert (maxSketch1(tests[i])) == 10;
// // //    }
// //     assert ((maxSketch1(3, {0,10,2  })) == (10));
// //     assert ((maxSketch1(3, {0,2,10  })) == (10));
// //     assert ((maxSketch1(3, {10,0,2  })) == (10));
// //     assert ((maxSketch1(3, {10,2,0  })) == (10));
// //     assert ((maxSketch1(3, {2,0,10  })) == (10));
// //     assert ((maxSketch1(3, {2,10,0  })) == (10));
// // 
// //     assert ((maxSketch1(3, {-1,10,20})) == (20));
// // //    assert ((maxSketch1(3, {10,-1,20})) == (20));
// // //    assert ((maxSketch1(3, {10,20,-1})) == (20));
// // //    assert ((maxSketch1(3, {-1,20,10})) == (20));
// // //    assert ((maxSketch1(3, {20,10,-1})) == (20));
// // //    assert ((maxSketch1(3, {20,-1,10})) == (20));
// // //    assert ((maxSketch1(3, {-1,-2,-3})) == (-1));
// // //    assert ((maxSketch1(3, {-2,-1,-3})) == (-1));
// // }
// 
