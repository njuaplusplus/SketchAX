void normalRoundsk (bit[32] in_p, ref bit _out)  implements pbe_normalRoundsk
{
  _out = 0;
  bit[256] T0 = {1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,0,1};
  bit[256] T1 = {1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1,1,0,0,0};
  bit[256] T2 = {0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1};
  bit[256] T3 = {1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,1,0,0,0,0,1,0,1,1,1,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,1,0,0,1,0,0,1,1,1,1,0,1,1,0,1,0,0,1,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0};
  bit[8] inv3 = {0,0,0,0,0,0,0,0};
  bit[8] inv0 = {0,0,0,0,0,0,0,0};
  bit[8] inv1 = {0,0,0,0,0,0,0,0};
  bit[8] inv2 = {0,0,0,0,0,0,0,0};
  for(int j = 0; j < 8; j = j + 1)/*Canonical*/
  {
    inv0[j] = in_p[j];
    inv1[j] = in_p[8 + j];
    inv2[j] = in_p[16 + j];
    inv3[j] = in_p[24 + j];
  }
  int i0 = ((int)inv0);
  int i1 = ((int)inv1);
  int i2 = ((int)inv2);
  int i3 = ((int)inv3);
  bit tmp = (((T0[i0]) ^ (T1[i1])) ^ (T2[i2])) ^ (T3[i3]);
  _out = tmp;
  return;
}
