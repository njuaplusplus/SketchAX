int Nb = 4;
int W = 32 ;
int ROUNDS = 10;




generator bit[32] Drot(bit[32] in, int r){ /* automatically rewritten */
	bit[32] tmp = in<<r;
	bit[32] tmp2 = in>>(32-r);
	bit[32] out=0;
	int i =0;
	for(i=0; i<32; ++i){
		out[i] = (i<r)?tmp2[i]: tmp[i];
	}
	return out;
}


bit normalRoundsk(bit[W] in_p) implements normalRound{
  bit [256] T0 = ??;
  bit [256] T1 = ??;
  bit [256] T2 = ??;
  bit [256] T3 = ??;
  bit[W] in;
  in = in_p; 
  
  bit[W] output;
  int i=0;
 { 
  	bit[8] inv0;
  	bit[8] inv1;
  	bit[8] inv2;
  	bit[8] inv3;
  	for(int j=0; j<8; ++j){
  		inv0[j] = in[i*32+j];
  		inv1[j] = in[i*32+8+j];
  		inv2[j] = in[i*32+2*8+j];
  		inv3[j] = in[i*32+3*8+j];
  	}
  	int i0 = (int) inv0;
  	int i1 = (int) inv1;
  	int i2 = (int) inv2;
  	int i3 = (int) inv3;
  	bit tmp  = T0[i0] ^ T1[i1]^ T2[i2]^ T3[i3];		
	output[0] = tmp;
  }
  return output[0];
}



bit normalRound(bit[W] in){
  bit [W] tmp1 = ByteSub(in);
  bit [W] tmp2 = tmp1; 
  bit [W] tmp3 = MixColumns(tmp2);
  return tmp3[0];
}

generator bit[W] ByteSub(bit[W] in){ /* automatically rewritten */
	bit[W] result;
	for(int i=0; i<W/8; ++i){
		bit [8] word;
		for(int j=0; j<8; j++){
			word[j] = in[i*8 + j];
		}
		word = ByteSubInd(word);
		for(int j=0; j<8; j++){
			result[i*8 + j] = word[j];
		}
	}
	return result;
}


generator bit[8] intToBit8(int v){ /* automatically rewritten */
	bit[8] output;
	for(int i=0; i<8; ++i){
		output[i] = (v % 2) > 0;
		v = v/2;
	}
	return output;
}


generator bit[8] ByteSubInd(bit[8] in){ /* automatically rewritten */
  int[256] SBTable = {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
		      0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
		      0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
		      0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
		      0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
		      0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
		      0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
		      0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
		      0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
		      0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
		      0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
		      0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
		      0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
		      0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		      0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
		      0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
	int x = SBTable[(int) in];
	return intToBit8( x );
}






generator bit[32] MixColumns(bit[32] in){ /* automatically rewritten */
	bit [32] t1 = (in << 1 );
	bit [32] ttt1 = {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0};
	bit [32] m1 = (in>>7) & ttt1;
	
	m1 = (m1<<1) | m1;
	m1 = (m1<<3) | m1;


	bit [32] ttt21 = {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1};
	bit [32] ttt22 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	bit [32] ttt23 = {0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
	bit [32] ttt31 = {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1};
	bit [32] ttt32 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};;
	bit [32] ttt33 = {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
	bit [32] ttt41 = {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	bit [32] ttt42 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
	bit [32] ttt43 = {1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1};

	bit [32] o1 = (t1 & ttt21) ^ ((in) &ttt22)^(m1& ttt23);
	bit [32] o2 = (t1 & ttt31) ^ ((in) &ttt32)^(m1& ttt33);
	bit [32] o3 = (t1 & ttt41) ^ ((in) &ttt42)^(m1& ttt43);
	return o1 ^ Drot(o2, 3*8) ^ Drot(o3, 2*8)^Drot(o3, 1*8) ;
}

