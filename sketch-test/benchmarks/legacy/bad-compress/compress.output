SKETCH version 1.7.4
Benchmark = compress.sk
/* BEGIN PACKAGE ANONYMOUS*/
/*compress.sk:5*/

void compress (bit[16] x, bit[16] m, ref bit[16] _out)/*compress.sk:5*/
{
  _out = ((bit[16])0);
  _out = ((bit[16])0);
  int i = 0;
  for(int j = 0; j < 16; j = j + 1)/*Canonical*/
  {
    if(m[j])/*compress.sk:9*/
    {
      _out[i] = x[j];
      i = i + 1;
    }
  }
  return;
}
/*compress.sk:46*/

void fast (bit[16] x_0, bit[16] m_1, ref bit[16] _out)  implements compress/*compress.sk:46*/
{
  _out = ((bit[16])0);
  bit[16] x = x_0;
  x = x_0 & m_1;
  bit[16] mk = (!(m_1)) << 0;
  bit[16] mp_s1 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast(mk, mp_s1);
  bit[16] mv = mp_s1 & m_1;
  bit[16] t = m_1 & mv;
  bit[16] m_s3 = (m_1 ^ t) | (t >> 1);
  bit[16] t_0 = x & mv;
  bit[16] x_s5 = (x ^ t_0) | (t_0 >> 1);
  mk = mk & (!(mp_s1));
  bit[16] mp_s1_0 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast(mk, mp_s1_0);
  mv = mp_s1_0 & m_s3;
  bit[16] t_1 = m_s3 & mv;
  bit[16] m_s3_0 = (m_s3 ^ t_1) | (t_1 >> 2);
  bit[16] t_2 = x_s5 & mv;
  bit[16] x_s5_0 = (x_s5 ^ t_2) | (t_2 >> 2);
  mk = mk & (!(mp_s1_0));
  bit[16] mp_s1_1 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast(mk, mp_s1_1);
  mv = mp_s1_1 & m_s3_0;
  bit[16] t_3 = m_s3_0 & mv;
  bit[16] m_s3_1 = (m_s3_0 ^ t_3) | (t_3 >> 4);
  bit[16] t_4 = x_s5_0 & mv;
  bit[16] x_s5_1 = (x_s5_0 ^ t_4) | (t_4 >> 4);
  mk = mk & (!(mp_s1_1));
  bit[16] mp_s1_2 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast(mk, mp_s1_2);
  mv = mp_s1_2 & m_s3_1;
  bit[16] t_5 = m_s3_1 & mv;
  bit[16] t_6 = x_s5_1 & mv;
  bit[16] x_s5_2 = (x_s5_1 ^ t_6) | (t_6 >> 8);
  mk = mk & (!(mp_s1_2));
  bit[16] mp_s1_3 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  xor_reduceFast(mk, mp_s1_3);
  mv = mp_s1_3 & ((m_s3_1 ^ t_5) | (t_5 >> 4));
  bit[16] t_7 = x_s5_2 & mv;
  _out = (x_s5_2 ^ t_7) | (t_7 >> 0);
  return;
}
/*compress.sk:24*/

void xor_reduce (bit[16] in, ref bit[16] _out)/*compress.sk:24*/
{
  _out = ((bit[16])0);
  _out = ((bit[16])0);
  _out[0] = in[0];
  for(int i = 1; i < 16; i = i + 1)/*Canonical*/
  {
    _out[i] = (in[i]) ^ (_out[i - 1]);
  }
  return;
}
/*compress.sk:33*/

void xor_reduceFast (bit[16] in, ref bit[16] _out)  implements xor_reduce/*compress.sk:33*/
{
  _out = ((bit[16])0);
  _out = in;
  _out = ((in << 1) & ({0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((in << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  _out = ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((_out << 2) & ({0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  _out = ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((_out << 8) & ({0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1}));
  _out = ((_out << 4) & ({0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1})) ^ ((_out << 0) & ({1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}));
  return;
}
/* END PACKAGE ANONYMOUS*/
[SKETCH] DONE
Total time = 48534
