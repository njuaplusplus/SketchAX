/* BEGIN PACKAGE ANONYMOUS*/
/*sk_src_.._buggy.sk:53*/

void normalRound (bit[32] in, ref bit _out)/*sk_src_.._buggy.sk:53*/
{
  _out = 0;
  bit[32] tmp1_s1 = ((bit[32])0);
  for(int i = 0; i < 4; i = i + 1)/*Canonical*/
  {
    bit[8] word = {0,0,0,0,0,0,0,0};
    for(int j = 0; j < 8; j = j + 1)/*Canonical*/
    {
      word[j] = in[(i * 8) + j];
    }
    int[256] SBTable = {99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22};
    int x = SBTable[((int)word)];
    bit[8] _out_s13 = ((bit[8])0);
    int v = x;
    for(int i_0 = 0; i_0 < 8; i_0 = i_0 + 1)/*Canonical*/
    {
      _out_s13[i_0] = (v % 2) > 0;
      v = v / 2;
    }
    for(int j_0 = 0; j_0 < 8; j_0 = j_0 + 1)/*Canonical*/
    {
      tmp1_s1[(i * 8) + j_0] = _out_s13[j_0];
    }
  }
  bit[32] t1 = tmp1_s1 << 1;
  bit[32] ttt1 = {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0};
  bit[32] m1 = (tmp1_s1 >> 7) & ttt1;
  m1 = (m1 << 1) | m1;
  m1 = (m1 << 3) | m1;
  bit[32] ttt21 = {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1};
  bit[32] ttt22 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  bit[32] ttt23 = {0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
  bit[32] ttt31 = {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1};
  bit[32] ttt32 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
  bit[32] ttt33 = {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
  bit[32] ttt41 = {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  bit[32] ttt42 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
  bit[32] ttt43 = {1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1};
  bit[32] o2 = ((t1 & ttt31) ^ (tmp1_s1 & ttt32)) ^ (m1 & ttt33);
  bit[32] o3 = ((t1 & ttt41) ^ (tmp1_s1 & ttt42)) ^ (m1 & ttt43);
  bit[32] tmp = o2 << 24;
  bit[32] tmp2 = o2 >> 8;
  bit[32] _out_s5 = ((bit[32])0);
  int i_1 = 0;
  for(i_1 = 0; i_1 < 32; i_1 = i_1 + 1)
  {
    _out_s5[i_1] = (i_1 < 24 ? tmp2[i_1] : tmp[i_1]);
  }
  bit[32] tmp_0 = o3 << 16;
  bit[32] tmp2_0 = o3 >> 16;
  bit[32] _out_s7 = ((bit[32])0);
  int i_2 = 0;
  for(i_2 = 0; i_2 < 32; i_2 = i_2 + 1)
  {
    _out_s7[i_2] = (i_2 < 16 ? tmp2_0[i_2] : tmp_0[i_2]);
  }
  bit[32] tmp_1 = o3 << 8;
  bit[32] tmp2_1 = o3 >> 24;
  bit[32] _out_s9 = ((bit[32])0);
  int i_3 = 0;
  for(i_3 = 0; i_3 < 32; i_3 = i_3 + 1)
  {
    _out_s9[i_3] = (i_3 < 8 ? tmp2_1[i_3] : tmp_1[i_3]);
  }
  bit[32] tmp3_s3 = (((((t1 & ttt21) ^ (tmp1_s1 & ttt22)) ^ (m1 & ttt23)) ^ _out_s5) ^ _out_s7) ^ _out_s9;
  _out = tmp3_s3[0];
  return;
}
/*sk_src_.._buggy.sk:20*/

void normalRoundsk (bit[32] in_p, ref bit _out)  implements pbe_normalRoundsk
{
  _out = 0;
  bit[256] T0 = {1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,0,1};
  bit[256] T1 = {0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0,1,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,1,1,0,1,1,0,1,0,1,1,0,1,0,0,0,1,1,1};
  bit[256] T2 = {0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1};
  bit[256] T3 = {0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1};
  bit[8] inv3 = {0,0,0,0,0,0,0,0};
  bit[8] inv0 = {0,0,0,0,0,0,0,0};
  bit[8] inv1 = {0,0,0,0,0,0,0,0};
  bit[8] inv2 = {0,0,0,0,0,0,0,0};
  for(int j = 0; j < 8; j = j + 1)/*Canonical*/
  {
    inv0[j] = in_p[j];
    inv1[j] = in_p[8 + j];
    inv2[j] = in_p[16 + j];
    inv3[j] = in_p[24 + j];
  }
  int i0 = ((int)inv0);
  int i1 = ((int)inv1);
  int i2 = ((int)inv2);
  int i3 = ((int)inv3);
  bit tmp = (((T0[i0]) ^ (T1[i1])) ^ (T2[i2])) ^ (T3[i3]);
  _out = tmp;
  return;
}
/* END PACKAGE ANONYMOUS*/
