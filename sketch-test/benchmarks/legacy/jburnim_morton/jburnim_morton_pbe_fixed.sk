pragma options "--bnd-unroll-amnt 20";
int W = 16;

bit[2*W] sketch1(bit[W] x, bit[W] y) {
  // Idea: It should be possible to shift all of the bits "in parallel"
  // using only log2(W) shifts.
  bit[2*W] x2 = x;
  int pt = 4*W;
  repeat(??) {
    int t = ??;
    // Shift some of the bits, and mask out their original positions.
    x2 = (x2 | (x2 << t)) & ??;
    assert t < pt; pt = t;
  }

  bit[2*W] y2 = y;
  repeat(??) {
    // Shift some of the bits, and mask out their original positions.
    y2 = (y2 | (y2 << ??)) & ??;
  }

  return x2 | (y2 << 1);
}

harness void constraints(int[W] ind) {
    assert_one_permutation({0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                           {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}, ind);

    assert_one_permutation({1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                           {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1}, ind);

    assert_one_permutation({0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
                           {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0}, ind);

    assert_one_permutation({1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},{0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                           {1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1}, ind);

}

void assert_one_permutation(bit[W] x, bit[W] y, bit[2*W] o, int[W] ind) {
    if (!is_permutation(W, ind)) return;
    bit[W] xp = permute(W, x, ind);
    bit[W] yp = permute(W, y, ind);
    bit[2*W] op = 0;
    for (int i=0; i<W; ++i) {
        op[2*i] = o[2*ind[i]];
        op[2*i+1] = o[2*ind[i]+1];
    }
    assert sketch1(xp, yp) == op;
    // assert interleave_bits(xp,yp) == op;
}

bit is_permutation(int N, int[N] ind) {
    bit[N] res = 0;
    for (int i=0; i<N; ++i) {
        if (ind[i]<0 || ind[i]>=N || res[ind[i]] == 1) {
            return 0;
        } else {
            res[ind[i]] = 1;
        }
    }
    return 1;
}

bit[N] permute(int N, bit[N]x, int[N] ind){
    bit[N] res = 0;
    for(int i=0; i<N; ++i){
        res[i]= x[ind[i]];
    }
    return res;
}
