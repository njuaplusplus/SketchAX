/* BEGIN PACKAGE ANONYMOUS*/
/*sk_src_..Test95.sk:25*/

void sklog2 (bit[4] in_0, ref bit[4] _out)  implements pbe_sklog2
{
  _out = ((bit[4])0);
  bit[4] in = in_0;
  _out = ((bit[4])0);
  bit[4] in_0_0 = in_0 & ({0,0,1,1});
  bit _out_s1 = 1;
  for(int i = 0; i < 4; i = i + 1)/*Canonical*/
  {
    _out_s1 = _out_s1 & (!(in_0_0[i]));
  }
  if(!(_out_s1))/*sk_src_..Test95.sk:33*/
  {
    in = in_0 >> 2;
    _out = _out | ({0,1,0,0});
  }
  bit[4] in_1 = in & ({0,1,0,0});
  bit _out_s3 = 1;
  for(int i_0 = 0; i_0 < 4; i_0 = i_0 + 1)/*Canonical*/
  {
    _out_s3 = _out_s3 & (!(in_1[i_0]));
  }
  if(!(_out_s3))/*sk_src_..Test95.sk:39*/
  {
    _out = _out | ({1,0,0,0});
  }
  return;
}
/*sk_src_..Test95.sk:3*/

void slog2 (bit[4] in, ref bit[4] _out)/*sk_src_..Test95.sk:3*/
{
  _out = ((bit[4])0);
  _out = ((bit[4])0);
  bit[4] ONE = ((bit[4])0);
  ONE[0] = 1;
  bit done = 0;
  for(int i = 3; i > 0; i = i - 1)
  {
    if((!(done)) && ((in[i]) == 0))/*sk_src_..Test95.sk:9*/
      { }
    else
    {
      done = 1;
      _out = _out + ONE;
    }
  }
  return;
}
/* END PACKAGE ANONYMOUS*/
