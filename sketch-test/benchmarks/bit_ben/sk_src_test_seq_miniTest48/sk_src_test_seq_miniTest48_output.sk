/* BEGIN PACKAGE ANONYMOUS*/
/*sk_src_..Test48.sk:26*/

void MergeSort (bit[4] input, ref bit[4] _out)  implements pbe_MergeSort
{
  _out = ((bit[4])0);
  bit[4] __sa0 = {0,0,1,1};
  bit[4] output = ((input << 2) & __sa0) | ((input >> 2) & (~(__sa0)));
  assert (((((output[0]) == (input[2])) && ((output[1]) == (input[3]))) && ((output[2]) == (input[0]))) && ((output[3]) == (input[1]))); //Assert at sk_src_..Test48.sk:29 (1)
  bit[4] _out_s2 = {0,0,0,0};
  sort(output, _out_s2);
  _out = _out_s2;
  return;
}
/*sk_src_..Test48.sk:7*/

void sort (bit[4] input, ref bit[4] _out)/*sk_src_..Test48.sk:7*/
{
  _out = ((bit[4])0);
  _out = ((bit[4])0);
  bit[4] done = ((bit[4])0);
  int k = 0;
  for(int i = 0; i < 4; i = i + 1)/*Canonical*/
  {
    bit cur = 1;
    for(int j = 0; j < 4; j = j + 1)/*Canonical*/
    {
      bit x = input[j];
      bit _pac_sc_s3_s5 = (!(x)) || cur;
      bit _pac_sc_s3;
      _pac_sc_s3 = _pac_sc_s3_s5;
      if(_pac_sc_s3_s5)/*sk_src_..Test48.sk:14*/
      {
        _pac_sc_s3 = !(done[j]);
      }
      if(_pac_sc_s3)/*sk_src_..Test48.sk:14*/
      {
        k = j;
        cur = input[j];
      }
    }
    _out[i] = cur;
    done[k] = 1;
  }
  return;
}
/* END PACKAGE ANONYMOUS*/
