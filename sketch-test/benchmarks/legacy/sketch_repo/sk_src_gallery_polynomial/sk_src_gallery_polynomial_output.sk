void p1Sk (bit[5] x, ref bit[5] _out)  implements pbe_p1Sk
{
  _out = ((bit[5])0);
  bit[5] one = ((bit[5])0);
  one[0] = 1;
  bit[5] two = ((bit[5])0);
  two[1] = 1;
  bit[5] four = two + two;
  bit[5] minusone = ((bit[5])0);
  minusone = !(minusone);
  bit[5] _out_s1 = {0,0,0,0,0};
  if(((((!(four[0])) & (!(four[1]))) & (!(four[2]))) & (!(four[3]))) & (!(four[4])))/*sk_src_..nomial.sk:22*/
  {
    _out_s1 = {0,0,0,0,0};
  }
  else
  {
    bit[5] n = four + minusone;
    bit[5] minusone_0 = ((bit[5])0);
    minusone_0 = !(minusone_0);
    bit[5] _out_s3 = {0,0,0,0,0};
    if(((((!(n[0])) & (!(n[1]))) & (!(n[2]))) & (!(n[3]))) & (!(n[4])))/*sk_src_..nomial.sk:22*/
    {
      _out_s3 = {0,0,0,0,0};
    }
    else
    {
      bit[5] n_0 = n + minusone_0;
      bit[5] minusone_1 = ((bit[5])0);
      minusone_1 = !(minusone_1);
      bit[5] _out_s3__0 = {0,0,0,0,0};
      if(((((!(n_0[0])) & (!(n_0[1]))) & (!(n_0[2]))) & (!(n_0[3]))) & (!(n_0[4])))/*sk_src_..nomial.sk:22*/
      {
        _out_s3__0 = {0,0,0,0,0};
      }
      else
      {
        bit[5] n_1 = n_0 + minusone_1;
        bit[5] minusone_2 = ((bit[5])0);
        minusone_2 = !(minusone_2);
        bit[5] _out_s3_0 = {0,0,0,0,0};
        if(((((!(n_1[0])) & (!(n_1[1]))) & (!(n_1[2]))) & (!(n_1[3]))) & (!(n_1[4])))/*sk_src_..nomial.sk:22*/
        {
          _out_s3_0 = {0,0,0,0,0};
        }
        else
        {
          bit[5] n_2 = n_1 + minusone_2;
          assert (((((!(n_2[0])) & (!(n_2[1]))) & (!(n_2[2]))) & (!(n_2[3]))) & (!(n_2[4]))); //Assert at sk_src_..nomial.sk:22 (1)
          bit[5] _out_s3__0_0 = {1,0,0,0,0};
          bit[5] in1 = x;
          bit[5] _out_s5 = ((bit[5])0);
          for(int i = 0; i < 5; i = i + 1)/*Canonical*/
          {
            if((_out_s3__0_0[i]) == 1)/*sk_src_..nomial.sk:9*/
            {
              _out_s5 = _out_s5 + in1;
            }
            in1 = in1 << 1;
          }
          _out_s3_0 = _out_s5 + ({0,1,1,0,0});
        }
        bit[5] in1_0 = x;
        bit[5] _out_s5_0 = ((bit[5])0);
        for(int i_0 = 0; i_0 < 5; i_0 = i_0 + 1)/*Canonical*/
        {
          if((_out_s3_0[i_0]) == 1)/*sk_src_..nomial.sk:9*/
          {
            _out_s5_0 = _out_s5_0 + in1_0;
          }
          in1_0 = in1_0 << 1;
        }
        _out_s3__0 = _out_s5_0 + ({1,1,0,1,1});
      }
      bit[5] in1_1 = x;
      bit[5] _out_s5_1 = ((bit[5])0);
      for(int i_1 = 0; i_1 < 5; i_1 = i_1 + 1)/*Canonical*/
      {
        if((_out_s3__0[i_1]) == 1)/*sk_src_..nomial.sk:9*/
        {
          _out_s5_1 = _out_s5_1 + in1_1;
        }
        in1_1 = in1_1 << 1;
      }
      _out_s3 = _out_s5_1 + ({0,1,1,0,1});
    }
    bit[5] in1_2 = x;
    bit[5] _out_s5_2 = ((bit[5])0);
    for(int i_2 = 0; i_2 < 5; i_2 = i_2 + 1)/*Canonical*/
    {
      if((_out_s3[i_2]) == 1)/*sk_src_..nomial.sk:9*/
      {
        _out_s5_2 = _out_s5_2 + in1_2;
      }
      in1_2 = in1_2 << 1;
    }
    _out_s1 = _out_s5_2 + ({0,0,0,0,0});
  }
  _out = _out_s1;
  return;
}
